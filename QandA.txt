1. Provide a query showing Customers (just their full names, customer ID and country) who are not in the US.  

    SELECT FirstName || ' ' || LastName, CustomerId, Country FROM Customer WHERE Country IS NOT "USA"  

2. Provide a query only showing the Customers from Brazil.  

    SELECT FirstName || ' ' || LastName, CustomerId, Country FROM Customer WHERE Country IS "Brazil"  

3. Provide a query showing the Invoices of customers who are from Brazil. The resultant table should show the customer's full name, Invoice ID, Date of the invoice and billing country.  

    SELECT FirstName || ' ' || LastName, InvoiceId, InvoiceDate, BillingCountry FROM Customer JOIN Invoice ON Invoice.CustomerId == Customer.CustomerId WHERE Country IS  "Brazil"  

4. Provide a query showing only the Employees who are Sales Agents.  

    SELECT * FROM Employee WHERE Title IS 'Sales Support Agent'  

5. Provide a query showing a unique list of billing countries from the Invoice table.  

    SELECT BillingCountry FROM Customer JOIN Invoice ON Invoice.CustomerId == Customer.CustomerId GROUP BY Country  

6. Provide a query showing the invoices of customers who are from Brazil.  

    SELECT * FROM Invoice JOIN Customer ON Invoice.CustomerId == Customer.CustomerId WHERE Country IS  "Brazil"  

7. Provide a query that shows the invoices associated with each sales agent. The resultant table should include the Sales Agent's full name.  

    SELECT SalesReps.FirstName || ' ' || SalesReps.LastName, Invoice.InvoiceId FROM (SELECT * FROM Employee JOIN Customer ON Customer.SupportRepId == Employee.EmployeeId) AS SalesReps JOIN Invoice ON Invoice.CustomerId == SalesReps.CustomerId  

8. Provide a query that shows the Invoice Total, Customer name, Country and Sale Agent name for all invoices and customers.  

    SELECT Invoice.Total AS 'Invoice Total', Customer.FirstName || ' ' || Customer.LastName AS 'Customer Name',  Customer.Country, Employee.FirstName || ' ' || Employee.LastName AS 'Sale Agent' FROM Employee JOIN Customer ON Employee.EmployeeId == Customer.SupportRepId JOIN Invoice ON Invoice.CustomerId == Customer.CustomerId  

9. How many Invoices were there in 2009 and 2011? What are the respective total sales for each of those years?  

    So far I can't do this with one select.  I do have it as 2 different selects...

10. Looking at the InvoiceLine table, provide a query that COUNTs the number of line items for Invoice ID 37.  

    SELECT COUNT(InvoiceLineId) FROM InvoiceLine WHERE InvoiceId == 37

11. Looking at the InvoiceLine table, provide a query that COUNTs the number of line items for each Invoice. HINT: [GROUP BY](http://www.sqlite.org/lang_select.html#resultset)  

    // Ordered by InvoiceId
    SELECT COUNT(InvoiceLineId), InvoiceId FROM InvoiceLine GROUP BY InvoiceId

    // Ordered by number of line items, from greatest to smallest
    SELECT COUNT(InvoiceLineId), InvoiceId FROM InvoiceLine GROUP BY InvoiceId ORDER BY COUNT(InvoiceLineId) DESC

12. Provide a query that includes the track name with each invoice line item.  

    SELECT InvoiceLineId, Track.Name FROM InvoiceLine JOIN Track ON Track.TrackId == InvoiceLine.TrackId 

13. Provide a query that includes the purchased track name AND artist name with each invoice line item.  

    SELECT Name AS 'Artist', Title AS 'Purchased Track Title', InvoiceLineId AS 'Invoice Line Item' FROM (SELECT Title, ArtistId, InvoiceLineId FROM (SELECT * FROM InvoiceLine JOIN Track ON Track.TrackId == InvoiceLine.TrackId)AS TrackStuff JOIN Album ON Album.AlbumId == TrackStuff.AlbumId) AS AlbumStuff JOIN Artist ON Artist.ArtistId == AlbumStuff.ArtistId

14. Provide a query that shows the # of invoices per country. HINT: [GROUP BY](http://www.sqlite.org/lang_select.html#resultset)  

    SELECT InvoiceId, BillingCountry FROM Invoice GROUP BY BillingCountry ORDER BY InvoiceId DESC

15. Provide a query that shows the total number of tracks in each playlist. The Playlist name should be include on the resultant table.  

    SELECT Name, TrackId FROM Playlist JOIN PlaylistTrack ON Playlist.PlaylistId == PlaylistTrack.PlaylistId GROUP BY Playlist.PlaylistId

** 16. Provide a query that shows all the Tracks, but displays no IDs. The resultant table should include the Album name, Media type and Genre.  

    SELECT Track.Name AS 'Song Title', Album.Title AS 'Album Title', MediaType.Name AS 'Media Type', Genre.Name AS 'Genre' FROM InvoiceLine
    JOIN Track
        ON Track.TrackId == InvoiceLine.TrackId
    JOIN Album
        ON Track.AlbumId == Album.AlbumId
    JOIN Artist
        ON Album.ArtistId == Artist.ArtistId
    JOIN MediaType
         ON Track.MediaTypeId == MediaType.MediaTypeId
    JOIN Genre
          ON Track.GenreId == Genre.GenreId
    ORDER BY InvoiceLineId

17. Provide a query that shows all Invoices but includes the # of invoice line items.  

    SELECT Invoice.InvoiceId AS 'Invoice Number', SUM(Quantity) AS 'Total Line Items'  FROM Invoice JOIN InvoiceLine ON Invoice.InvoiceId == InvoiceLine.InvoiceId GROUP BY InvoiceLine.InvoiceId

18. Provide a query that shows total sales made by each sales agent.  

    SELECT SUM(Total), SalesReps.FirstName || ' ' || SalesReps.LastName FROM (SELECT * FROM Employee JOIN Customer ON Customer.SupportRepId == Employee.EmployeeId) AS SalesReps JOIN Invoice ON Invoice.CustomerId == SalesReps.CustomerId GROUP BY SalesReps.EmployeeId

19. Which sales agent made the most in sales in 2009? HINT: [MAX](https://www.sqlite.org/lang_aggfunc.html#maxggunc)  

    // This one required either 'sum' or 'total' instead of 'max' -- 'max' returned the single biggest sale (in case we need that one later)

    SELECT Employee.FirstName || ' ' || Employee.LastName AS "Sales Rep", SUM(Total) AS "Total Sales" FROM Invoice JOIN Customer ON Invoice.CustomerId == Customer.CustomerId JOIN Employee ON Customer.SupportRepId == Employee.EmployeeId WHERE InvoiceDate >= '2009-01-01 00:00:00.000' AND InvoiceDate < '2009-12-31 23:00:00.000' GROUP BY Employee.EmployeeId ORDER BY "Total Sales" DESC LIMIT(1)

20. Which sales agent made the most in sales in 2010?  

    SELECT Employee.FirstName || ' ' || Employee.LastName AS "Sales Rep", SUM(Total) AS "Total Sales" FROM Invoice JOIN Customer ON Invoice.CustomerId == Customer.CustomerId JOIN Employee ON Customer.SupportRepId == Employee.EmployeeId WHERE InvoiceDate >= '2010-01-01 00:00:00.000' AND InvoiceDate < '2010-12-31 23:00:00.000' GROUP BY Employee.EmployeeId ORDER BY "Total Sales" DESC LIMIT(1)

21. Which sales agent made the most in sales over all?  

    SELECT Employee.FirstName || ' ' || Employee.LastName AS "Sales Rep", SUM(Total) AS "Total Sales" FROM Invoice JOIN Customer ON Invoice.CustomerId == Customer.CustomerId JOIN Employee ON Customer.SupportRepId == Employee.EmployeeId GROUP BY Employee.EmployeeId ORDER BY "Total Sales" DESC LIMIT(1)

22. Provide a query that shows the # of customers assigned to each sales agent.  

    SELECT Employee.FirstName || ' ' || Employee.LastName AS "Sales Rep", MAX(CustomerId) AS "Total Customers"  FROM Customer JOIN Employee ON Customer.SupportRepId == Employee.EmployeeId GROUP BY EmployeeId

23. Provide a query that shows the total sales per country. Which country's customers spent the most?  




24. Provide a query that shows the most purchased track of 2013.  


25. Provide a query that shows the top 5 most purchased tracks over all.  


26. Provide a query that shows the top 3 best selling artists.  


27. Provide a query that shows the most purchased Media Type.  